//return안이용
//안쓰는 함수 생긴거 확인 필요
package com.example.a240510

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class StateActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .verticalScroll(rememberScrollState()),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.size(20.dp))
                val clickOrder = remember { mutableStateListOf<String>()}
                Row() {
                    SubButton12("저장", 24, onClick = {
                        clickOrder.add(it)
                    })
                    Spacer(modifier = Modifier.size(20.dp))
                    SubButton12("삭제", 24, onClick = {
                        clickOrder.add(it)
                    })
                }
                Spacer(modifier = Modifier.size(20.dp))
                val tvVisible = SubButton2(name = "기록숨기기", size = 24)
                Spacer(modifier = Modifier.size(20.dp))
                MakeTv(clickOrder, tvVisible)
            }
        }
    }

    @Composable
    fun SubButton12(name: String, size: Int, onClick: (String) -> Unit) {
        Button(onClick = {
            onClick(name)
        }) {
            Text(text = name, fontSize = size.sp)
        }
    }

    @Composable
    fun SubButton1(name: String, size: Int, array: MutableList<String>): MutableList<String> {
        var array by remember {
            mutableStateOf(array)
        }
        Button(onClick = {
            array.add(name)
        }) {
            Text(text = name, fontSize = size.sp)
        }
        return array
    }

    @Composable
    fun SubButton2(name: String, size: Int): Boolean {
        var tvVisible by remember {
            mutableStateOf(true)
        }
        Button(onClick = {
            tvVisible = if (tvVisible) false else true
        }) {
            Text(text = name, fontSize = size.sp)
        }
        return tvVisible
    }
}

@Composable
fun MakeTv(array: List<String>, tvVisible: Boolean) {
    if (array.size > 0 && tvVisible) {
        var saveCount: Int = 0
        var deleteCount: Int = 0
        for (i in 0..array.size - 1) {
            if (array[i] == "저장") {
                saveCount++
                Text(text = "${saveCount}저장했습니다", fontSize = 16.sp)
            } else if (array[i] == "삭제") {
                deleteCount++
                Text(text = "${deleteCount}삭제했습니다", fontSize = 16.sp)
            }
        }
    }
}
